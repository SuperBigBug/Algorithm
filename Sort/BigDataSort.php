<?php
/**
 * Created by PhpStorm.
 * User: zhongyu
 * Date: 2020/8/14
 * Time: 11:31 AM
 */

class BigDataSort
{
    // 大量在外部排序中使用的数据结构是(B+tree)

    //外部排序指的是大文件的排序，即待排序的记录存储在外存储器上，待排序的文件无法一次装入内存，
    //需要在内存和外部存储器之间进行多次数据交换，以达到排序整个文件的目的。
    //外部排序最常用的算法是多路归并排序，即将原文件分解成多个能够一次性装人内存的部分，
    //分别把每一部分调入内存完成排序。然后，对已经排序的子文件进行归并排序。
    // 大规模数据存储中，实现索引查询这样一个实际背景下，树节点存储的元素数量是有限的（如果元素数量非常多的话，查找就退化成节点内部的线性查找了），
    //这样导致二叉查找树结构由于树的深度过大而造成磁盘I/O读写过于频繁，进而导致查询效率低下，
    //那么如何减少树的深度（当然是不能减少查询的数据量），一个基本的想法就是：采用多叉树结构（由于树节点元素数量是有限的，
    //自然该节点的子树数量也就是有限的）。 这样我们就提出了一个新的查找树结构——多路查找树。根据平衡二叉树的启发，
    //自然就想到平衡多路查找树结构，也就是B~tree(B树结构)
}